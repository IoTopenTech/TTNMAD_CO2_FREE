#include <lmic.h>
#include <hal/hal.h>
#include <SPI.h>
#include <U8g2lib.h>
#include <Wire.h>
#include "SparkFun_SCD30_Arduino_Library.h" //Click here to get the library: http://librarymanager/All#SparkFun_SCD30
// LoRaWAN NwkSKey, network session key
// This should be in big-endian (aka msb).
static const PROGMEM u1_t NWKSKEY[16] = {  RELLENAR };

// LoRaWAN AppSKey, application session key
// This should also be in big-endian (aka msb).
static const u1_t PROGMEM APPSKEY[16] = { RELLENAR };

// LoRaWAN end-device address (DevAddr)
// See http://thethingsnetwork.org/wiki/AddressSpace
// The library converts the address to network byte order as needed, so this should be in big-endian (aka msb) too.
static const u4_t DEVADDR = 0xRELLENAR; // <-- Change this address for every node!

// Pin mapping for TTGO ESP32 v2.1
const lmic_pinmap lmic_pins = {
  .nss = 18,
  .rxtx = LMIC_UNUSED_PIN,
  .rst = 23,
  .dio = {/*dio0*/ 26, /*dio1*/ 33, /*dio2*/ 32 }
};
// These callbacks are only used in over-the-air activation, so they are
// left empty here (we cannot leave them out completely unless
// DISABLE_JOIN is set in arduino-lmic/project_config/lmic_project_config.h,
// otherwise the linker will complain).
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }


static osjob_t sendjob;


U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
SCD30 airSensor; // via I2C
#define educamadrid_width 69
#define educamadrid_height 64
static unsigned char educamadrid_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x80, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x0f, 0xf0, 0xff, 0x03, 0x00, 0x00,
  0x00, 0xfc, 0xff, 0x01, 0x80, 0xff, 0x07, 0x00, 0x00, 0x00, 0xfe, 0x3f,
  0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0xff, 0x07, 0x20, 0x00, 0xf8,
  0x0f, 0x00, 0x00, 0x80, 0xff, 0x03, 0xf0, 0x00, 0xe0, 0x1f, 0x00, 0x00,
  0x80, 0xff, 0x01, 0xf8, 0x01, 0xc0, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x00,
  0xfc, 0x01, 0xc0, 0x3f, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0xfc, 0x03, 0x80,
  0x7f, 0xf0, 0x01, 0xe0, 0x3f, 0x00, 0xfc, 0x07, 0x00, 0x7f, 0xf8, 0x01,
  0xf0, 0x1f, 0x00, 0xfc, 0x07, 0x00, 0x7e, 0xf8, 0x03, 0xf0, 0x0f, 0x00,
  0xfc, 0x0f, 0x00, 0x7e, 0xf8, 0x07, 0xf8, 0x07, 0x00, 0xfc, 0x1f, 0x00,
  0xfe, 0xf8, 0x07, 0xf8, 0x07, 0x00, 0xfc, 0x1f, 0x0c, 0xfc, 0xf8, 0x07,
  0xfc, 0x03, 0x00, 0xfc, 0xff, 0x0f, 0xfc, 0xf0, 0x07, 0xfc, 0x03, 0x00,
  0x7c, 0xfe, 0x0f, 0x7c, 0xf0, 0x0f, 0xfc, 0x01, 0x00, 0x7c, 0xfe, 0x0f,
  0x7e, 0xf0, 0x0f, 0xfc, 0x01, 0x00, 0x7c, 0xfc, 0x07, 0x7e, 0xf0, 0x0f,
  0xfe, 0x01, 0x00, 0x7e, 0xf8, 0x07, 0x3f, 0xe0, 0x0f, 0xfe, 0x00, 0xf0,
  0x7f, 0x78, 0x80, 0x3f, 0xe0, 0x0f, 0xfe, 0x00, 0xff, 0x7f, 0x00, 0xc0,
  0x1f, 0xe0, 0x0f, 0xfe, 0xc0, 0xff, 0x7f, 0x00, 0xe0, 0x0f, 0xc0, 0x0f,
  0x7e, 0xe0, 0xff, 0x0f, 0x00, 0xf8, 0x07, 0xc0, 0x0f, 0x7e, 0xf0, 0xff,
  0x01, 0x00, 0xfc, 0x03, 0xc0, 0x0f, 0x7e, 0xf0, 0x7f, 0x00, 0x00, 0xfe,
  0x01, 0xc0, 0x0f, 0x7e, 0xe0, 0xff, 0x00, 0x00, 0xff, 0x00, 0xc0, 0x0f,
  0x7e, 0xc0, 0xff, 0x03, 0x00, 0x7f, 0x00, 0xc0, 0x0f, 0x7e, 0x80, 0xff,
  0x1f, 0x00, 0x7e, 0x00, 0xc0, 0x0f, 0x7e, 0x00, 0xfc, 0x7f, 0x00, 0xfc,
  0x00, 0xc0, 0x0f, 0xfe, 0x00, 0xf0, 0x3f, 0x00, 0xf8, 0x00, 0xc0, 0x0f,
  0xfe, 0x00, 0x80, 0x3f, 0x00, 0xf8, 0x01, 0xc0, 0x0f, 0xfe, 0x00, 0x00,
  0x3e, 0x38, 0xf8, 0x03, 0xe0, 0x0f, 0xfe, 0x01, 0x00, 0x3e, 0xfc, 0xf1,
  0x03, 0xe0, 0x0f, 0xfe, 0x01, 0x00, 0x3e, 0xfe, 0xff, 0x07, 0xf0, 0x07,
  0xfe, 0x01, 0x00, 0x3e, 0xfe, 0xff, 0x07, 0xf0, 0x07, 0xfc, 0x03, 0x00,
  0xbe, 0xff, 0xff, 0x0f, 0xf0, 0x07, 0xfc, 0x03, 0x00, 0xfe, 0x9f, 0xff,
  0x0f, 0xf8, 0x07, 0xfc, 0x07, 0x00, 0xfe, 0x0f, 0xfe, 0x0f, 0xf8, 0x03,
  0xf8, 0x0f, 0x00, 0xfe, 0x0f, 0xf0, 0x0f, 0xfc, 0x01, 0xf8, 0x1f, 0x00,
  0xfe, 0x07, 0xe0, 0x0f, 0xfc, 0x01, 0xf0, 0x3f, 0x00, 0xfe, 0x03, 0x00,
  0x00, 0xfe, 0x01, 0xf0, 0x7f, 0x00, 0xfe, 0x01, 0x00, 0x00, 0xff, 0x00,
  0xe0, 0xff, 0x00, 0xfe, 0x01, 0x00, 0x80, 0x7f, 0x00, 0xc0, 0xff, 0x01,
  0xfe, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x80, 0xff, 0x03, 0x7e, 0x00, 0x00,
  0xe0, 0x3f, 0x00, 0x80, 0xff, 0x07, 0x3e, 0x00, 0x00, 0xf0, 0x3f, 0x00,
  0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0xfe, 0x3f,
  0x00, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0xfc, 0xff, 0x01, 0x00, 0xc0,
  0xff, 0x07, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0xf8, 0xff, 0x01, 0x00,
  0x00, 0xe0, 0xff, 0xff, 0xf3, 0xff, 0xff, 0x01, 0x00, 0x00, 0xc0, 0xff,
  0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x1f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




#define crif_width 66
#define crif_height 64
static unsigned char crif_bits[] = {
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x78, 0x00, 0xc0, 0x0f, 0x00, 0x78, 0x00, 0x00, 0x00, 0xfc, 0x00,
  0x80, 0x07, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x80, 0x07, 0x00,
  0xfe, 0x01, 0x00, 0x00, 0xff, 0x03, 0x80, 0x07, 0x00, 0xff, 0x03, 0x00,
  0x00, 0xff, 0x03, 0x80, 0x07, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0x03,
  0x80, 0x07, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0x03, 0x80, 0x07, 0x00,
  0xff, 0x03, 0x00, 0x00, 0xfe, 0x03, 0x80, 0x07, 0x00, 0xff, 0x01, 0x00,
  0x00, 0xfe, 0x07, 0x80, 0x07, 0x80, 0xff, 0x01, 0x00, 0x00, 0xf8, 0x0f,
  0x80, 0x07, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x80, 0x07, 0xc0,
  0x0f, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x80, 0x07, 0xe0, 0x07, 0x00, 0x00,
  0x00, 0x80, 0x1f, 0x80, 0x07, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0x80, 0x07, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x07, 0xf0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x80, 0x07, 0xf0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x3e, 0x80, 0x07, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7c,
  0x80, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x80, 0x07, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x80, 0x07, 0xf8, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x7c, 0x80, 0x07, 0xf8, 0x00, 0x70, 0x00, 0xfc, 0x00, 0xfc,
  0x80, 0x07, 0xfc, 0x00, 0xfc, 0x00, 0xfe, 0x01, 0xfc, 0xc0, 0x0f, 0xfc,
  0x00, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03,
  0xfe, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0xfc, 0x01, 0x7c, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x07, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x80, 0x07, 0xc0, 0x07, 0x00, 0x00,
  0x00, 0xc0, 0x3f, 0x80, 0x07, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0xff,
  0x80, 0x07, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x87, 0x87, 0xff,
  0x07, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xf8, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
  0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00
};

#define wifi1_icon16x16_width 16
#define wifi1_icon16x16_height 16
unsigned char wifi1_icon16x16[] =
{
  0b00000000, 0b00000000, //
  0b00000111, 0b11100000, //      ######
  0b00011111, 0b11111000, //    ##########
  0b00111111, 0b11111100, //   ############
  0b01110000, 0b00001110, //  ###        ###
  0b01100111, 0b11100110, //  ##  ######  ##
  0b00001111, 0b11110000, //     ########
  0b00011000, 0b00011000, //    ##      ##
  0b00000011, 0b11000000, //       ####
  0b00000111, 0b11100000, //      ######
  0b00000100, 0b00100000, //      #    #
  0b00000001, 0b10000000, //        ##
  0b00000001, 0b10000000, //        ##
  0b00000000, 0b00000000, //
  0b00000000, 0b00000000, //
  0b00000000, 0b00000000, //
};

#define arrow_up_icon16x16_width 16
#define arrow_up_icon16x16_height 16
unsigned char arrow_up_icon16x16[] =
{
  0b00000001, 0b10000000, //        ##
  0b00000011, 0b11000000, //       ####
  0b00000111, 0b11100000, //      ######
  0b00001111, 0b11110000, //     ########
  0b00011110, 0b01111000, //    ####  ####
  0b00111100, 0b00111100, //   ####    ####
  0b01111000, 0b00011110, //  ####      ####
  0b11111100, 0b00111111, // ######    ######
  0b11111100, 0b00111111, // ######    ######
  0b01111100, 0b00111110, //  #####    #####
  0b00011100, 0b00111000, //    ###    ###
  0b00011100, 0b00111000, //    ###    ###
  0b00011100, 0b00111000, //    ###    ###
  0b00011111, 0b11111000, //    ##########
  0b00011111, 0b11111000, //    ##########
  0b00001111, 0b11110000, //     ########
};

#define cancel_icon16x16_width 16
#define cancel_icon16x16_height 16
unsigned char cancel_icon16x16[] =
{
  0b00000000, 0b00000000, //
  0b00000000, 0b00000000, //
  0b00111000, 0b00001110, //   ###       ###
  0b00111100, 0b00011110, //   ####     ####
  0b00111110, 0b00111110, //   #####   #####
  0b00011111, 0b01111100, //    ##### #####
  0b00001111, 0b11111000, //     #########
  0b00000111, 0b11110000, //      #######
  0b00000011, 0b11100000, //       #####
  0b00000111, 0b11110000, //      #######
  0b00001111, 0b11111000, //     #########
  0b00011111, 0b01111100, //    ##### #####
  0b00111110, 0b00111110, //   #####   #####
  0b00111100, 0b00011110, //   ####     ####
  0b00111000, 0b00001110, //   ###       ###
  0b00000000, 0b00000000, //
};

void setup() {
  Serial.begin(115200);
  Serial.println("TTNMAD_CO2_FREE");
  u8g2.begin();
  u8g2.enableUTF8Print();
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.drawXBMP( 30, 0, educamadrid_width, educamadrid_height, educamadrid_bits);
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(3000);
  Wire.begin();
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.drawXBMP( 31, 0, crif_width, crif_height, crif_bits);
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(3000);
  airSensor.begin();
  airSensor.setMeasurementInterval(2); //Change number of seconds between measurements: 2 to 1800 (30 minutes)
  //airSensor.setAltitudeCompensation(245); //Set altitude of the sensor in m
  //airSensor.setAmbientPressure(1030); //Current ambient pressure in mBar: 700 to 1200
  // LMIC init
  os_init();
  // Reset the MAC state. Session and pending data transfers will be discarded.
  LMIC_reset();

  // Set static session parameters. Instead of dynamically establishing a session
  // by joining the network, precomputed session parameters are be provided.
#ifdef PROGMEM
  // On AVR, these values are stored in flash and only copied to RAM
  // once. Copy them to a temporary buffer here, LMIC_setSession will
  // copy them into a buffer of its own again.
  uint8_t appskey[sizeof(APPSKEY)];
  uint8_t nwkskey[sizeof(NWKSKEY)];
  memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
  memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
  LMIC_setSession (0x13, DEVADDR, nwkskey, appskey);
#else
  // If not running an AVR with PROGMEM, just use the arrays directly
  LMIC_setSession (0x13, DEVADDR, NWKSKEY, APPSKEY);
#endif

#if defined(CFG_eu868)
  // Set up the channels used by the Things Network, which corresponds
  // to the defaults of most gateways. Without this, only three base
  // channels from the LoRaWAN specification are used, which certainly
  // works, so it is good for debugging, but can overload those
  // frequencies, so be sure to configure the full frequency range of
  // your network here (unless your network autoconfigures them).
  // Setting up channels should happen after LMIC_setSession, as that
  // configures the minimal channel set. The LMIC doesn't let you change
  // the three basic settings, but we show them here.
  LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(1, 868300000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
  LMIC_setupChannel(2, 868500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(3, 867100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(4, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(5, 867500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
  // TTN defines an additional channel at 869.525Mhz using SF9 for class B
  // devices' ping slots. LMIC does not have an easy way to define set this
  // frequency and support for class B is spotty and untested, so this
  // frequency is not configured here.
#elif defined(CFG_us915) || defined(CFG_au915)
  // NA-US and AU channels 0-71 are configured automatically
  // but only one group of 8 should (a subband) should be active
  // TTN recommends the second sub band, 1 in a zero based count.
  // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
  LMIC_selectSubBand(1);
#elif defined(CFG_as923)
  // Set up the channels used in your country. Only two are defined by default,
  // and they cannot be changed.  Use BAND_CENTI to indicate 1% duty cycle.
  // LMIC_setupChannel(0, 923200000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);
  // LMIC_setupChannel(1, 923400000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);

  // ... extra definitions for channels 2..n here
#elif defined(CFG_kr920)
  // Set up the channels used in your country. Three are defined by default,
  // and they cannot be changed. Duty cycle doesn't matter, but is conventionally
  // BAND_MILLI.
  // LMIC_setupChannel(0, 922100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
  // LMIC_setupChannel(1, 922300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
  // LMIC_setupChannel(2, 922500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);

  // ... extra definitions for channels 3..n here.
#elif defined(CFG_in866)
  // Set up the channels used in your country. Three are defined by default,
  // and they cannot be changed. Duty cycle doesn't matter, but is conventionally
  // BAND_MILLI.
  // LMIC_setupChannel(0, 865062500, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
  // LMIC_setupChannel(1, 865402500, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
  // LMIC_setupChannel(2, 865985000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);

  // ... extra definitions for channels 3..n here.
#else
# error Region not supported
#endif

  // Disable link check validation
  LMIC_setLinkCheckMode(0);

  // TTN uses SF9 for its RX2 window.
  LMIC.dn2Dr = DR_SF9;

  // Set data rate and transmit power for uplink
  LMIC_setDrTxpow(DR_SF7, 14);


}
//Por debajo de 1000 no parpadea nada
//Entre 1000 y 2000 parpadea el texto ENRARECIDO
//Por encima de 2000 parpadea todo
bool parpadeo = false;
byte tipoParpadeo = 0; //0-Ninguno 1-Enrarecido 2-Inaceptable
unsigned long ultimoRefresco = 0;
unsigned long ultimaLectura = 0;
unsigned long ultimoEnvio = millis();
int co2;
float temperatura, humedad;
void loop() {
  os_runloop_once();
  //Leemos el sensor cada 10 segundos
  //Parpadeamos cada 0.5 segundos
  //Enviamos por LoRaWAN cada 5 minutos
  if (ultimoEnvio + (5 * 60 * 1000) < millis()) {
    do_send(&sendjob);
    ultimoEnvio=millis();
  }
  if (ultimaLectura + 10000 < millis()) {
    co2 = airSensor.getCO2();
    temperatura = airSensor.getTemperature();
    humedad = airSensor.getHumidity();
    ultimaLectura = millis();
  }
  if (ultimoRefresco + 500 < millis()) {
    parpadeo = !parpadeo;
    u8g2.clearBuffer();
    //u8g2.drawFrame(0,0,128,64);
    u8g2.setFont(u8g2_font_logisoso18_tr);
    switch (co2) {
      case 2000 ... 20000:
        tipoParpadeo = 2;
        if (parpadeo) {
          u8g2.setCursor(0, 50);
          u8g2.print("INACEPTABLE");
        }
        break;
      case 1000 ... 1999:
        tipoParpadeo = 1;
        if (parpadeo) {
          u8g2.setCursor(5, 50);
          u8g2.print("ENRARECIDO");
        }
        break;
      default:
        tipoParpadeo = 0;
        u8g2.setCursor(10, 50);
        u8g2.print("ACEPTABLE");
        break;
    }

    if (tipoParpadeo != 2 || (tipoParpadeo == 2 && parpadeo)) {
      u8g2.setCursor(0, 28);
      u8g2.setFont(u8g2_font_logisoso28_tn);
      u8g2.print(co2);
      u8g2.setCursor(80, 14);
      u8g2.setFont(u8g2_font_crox4hb_tr);
      u8g2.print("CO2");
      u8g2.setCursor(80, 28);
      u8g2.print("ppm");
      u8g2.setFont(u8g2_font_helvR12_tf);
      u8g2.setCursor(0, 64);
      //u8g2.print(airSensor.getTemperature(), 1);
      u8g2.print(temperatura, 1);
      u8g2.print("\xb0");
      u8g2.setCursor(72, 64);
      u8g2.print(humedad, 1);
      u8g2.print(" %");
    }
    u8g2.sendBuffer();
    ultimoRefresco = millis();
  }
}
void onEvent (ev_t ev) {
  Serial.print(os_getTime());
  Serial.print(": ");
  switch (ev) {
    case EV_SCAN_TIMEOUT:
      Serial.println(F("EV_SCAN_TIMEOUT"));
      break;
    case EV_BEACON_FOUND:
      Serial.println(F("EV_BEACON_FOUND"));
      break;
    case EV_BEACON_MISSED:
      Serial.println(F("EV_BEACON_MISSED"));
      break;
    case EV_BEACON_TRACKED:
      Serial.println(F("EV_BEACON_TRACKED"));
      break;
    case EV_JOINING:
      Serial.println(F("EV_JOINING"));
      break;
    case EV_JOINED:
      Serial.println(F("EV_JOINED"));
      break;
    /*
      || This event is defined but not used in the code. No
      || point in wasting codespace on it.
      ||
      || case EV_RFU1:
      ||     Serial.println(F("EV_RFU1"));
      ||     break;
    */
    case EV_JOIN_FAILED:
      Serial.println(F("EV_JOIN_FAILED"));
      break;
    case EV_REJOIN_FAILED:
      Serial.println(F("EV_REJOIN_FAILED"));
      break;
    case EV_TXCOMPLETE:
      Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
      if (LMIC.txrxFlags & TXRX_ACK)
        Serial.println(F("Received ack"));
      if (LMIC.dataLen) {
        Serial.println(F("Received "));
        Serial.println(LMIC.dataLen);
        Serial.println(F(" bytes of payload"));
      }
      // Schedule next transmission
      //os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
      break;
    case EV_LOST_TSYNC:
      Serial.println(F("EV_LOST_TSYNC"));
      break;
    case EV_RESET:
      Serial.println(F("EV_RESET"));
      break;
    case EV_RXCOMPLETE:
      // data received in ping slot
      Serial.println(F("EV_RXCOMPLETE"));
      break;
    case EV_LINK_DEAD:
      Serial.println(F("EV_LINK_DEAD"));
      break;
    case EV_LINK_ALIVE:
      Serial.println(F("EV_LINK_ALIVE"));
      break;
    /*
      || This event is defined but not used in the code. No
      || point in wasting codespace on it.
      ||
      || case EV_SCAN_FOUND:
      ||    Serial.println(F("EV_SCAN_FOUND"));
      ||    break;
    */
    case EV_TXSTART:
      Serial.println(F("EV_TXSTART"));
      break;
    case EV_TXCANCELED:
      Serial.println(F("EV_TXCANCELED"));
      break;
    case EV_RXSTART:
      /* do not print anything -- it wrecks timing */
      break;
    case EV_JOIN_TXCOMPLETE:
      Serial.println(F("EV_JOIN_TXCOMPLETE: no JoinAccept"));
      break;
    default:
      Serial.print(F("Unknown event: "));
      Serial.println((unsigned) ev);
      break;
  }
}
void do_send(osjob_t* j) {
  // Check if there is not a current TX/RX job running
  if (LMIC.opmode & OP_TXRXPEND) {
    Serial.println(F("OP_TXRXPEND, not sending"));
  } else {
    // Prepare upstream data transmission at the next possible time.
    uint8_t myData[6] = {(co2 & 0xFF00) >> 8, co2 & 0x00FF, ((int)(temperatura*10) & 0xFF00) >> 8 , (int)(temperatura*10) & 0xFF, ((int)(humedad*10) & 0xFF00) >> 8 , (int)(humedad*10) & 0xFF};
    LMIC_setTxData2(1, myData, sizeof(myData) , 0);
    Serial.println(F("Packet queued"));
  }
  // Next TX is scheduled after TX_COMPLETE event.
}